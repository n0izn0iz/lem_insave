#include "lem_in.h"
#include <stdio.h>

#suite objects

#tcase construct_room

	#test construct_room_name
		char* str = "jambon";
		t_room* room = construct_room(str, 42, 24);
		fail_unless(strcmp(room->name, str) == 0, "the name was not assigned correctly");

	#test construct_room_name_copy
		char* str = "jambon";
		t_room* room = construct_room(str, 42, 24);
		fail_unless(room->name != str, "the string was not copied");

	#test construct_room_coord_x
		t_room* room = construct_room("jambon", 42, 24);
		fail_unless(room->coord_x == 42, "coord_x was not assigned properly");

	#test construct_room_coord_y
		t_room* room = construct_room("jambon", 42, 24);
		fail_unless(room->coord_y == 24, "coord_y was not assigned properly");

	#test construct_room_array
		t_room* room = construct_room("jambon", 42, 24);
		fail_unless(room->tubes->size == 0, "the tube array was not correctly initialized");

	#test construct_ant_count
		t_room* room = construct_room("jambon", 42, 24);
		fail_unless(room->ant_id == 0, "ant_id was not correctly initialized");

#tcase link_rooms

	#test link_rooms_a
		t_room* room_a = construct_room("a", 42, 24);
		t_room* room_b = construct_room("b", 42, 24);
		link_rooms(room_a, room_b);
		fail_unless(((t_room*)array_get(room_a->tubes, 0)) == room_b, "link is broken from a to b");

	#test link_rooms_b
		t_room* room_a = construct_room("a", 42, 24);
		t_room* room_b = construct_room("b", 42, 24);\
		link_rooms(room_a, room_b);
		fail_unless(((t_room*)array_get(room_b->tubes, 0)) == room_a, "link is broken from b to a");

#tcase construct_map
	
	#test construct_map_room_array
		t_map* map = construct_map();
		fail_unless(map->rooms->size == 0, "the room array was not correctly initialized");